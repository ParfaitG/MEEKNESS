3         2      2        1       1
2         0      2        1       1
7         2      1        0       1
2         1      1       .5       1
9         0      2        1       1
0         0      2        1       1
8         3      1       .5       1'
df1 <- read.table(text=txt, header=TRUE)
df1
by(df1, df1$Lead)
by(df1, df1$Lead, identity)
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_List <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
data.frame(Time = T,
Lead = sub$Lead[[1]]
Value = sum(sub[mask,"Result"])/sum(sub[mask, "Count"]))
})
do.call(rbind, subdf_List)
})
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_List <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
data.frame(Time = T,
Lead = sub$Lead[[1]],
Value = sum(sub[mask,"Result"])/sum(sub[mask, "Count"]))
})
do.call(rbind, subdf_List)
})
Time <- 0:10
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_List <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
data.frame(Time = T,
Lead = sub$Lead[[1]],
Value = sum(sub[mask,"Result"])/sum(sub[mask, "Count"]))
})
do.call(rbind, subdf_List)
})
df_List
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
data.frame(Time = T,
Lead = sub$Lead[[1]],
Value = sum(sub[mask,"Result"])/sum(sub[mask, "Count"]))
})
do.call(rbind, subdf_list)
})
df_list
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
data.frame(Time = t,
Lead = sub$Lead[[1]],
Value = sum(sub[mask,"Result"])/sum(sub[mask, "Count"]))
})
do.call(rbind, subdf_list)
})
df_list
df1
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(data.frame(sum(sub[mask,"Result"])/sum(sub[mask, "Count"])),
leadcol)
})
do.call(rbind, subdf_list)
})
df_list
final_df <- cbind(Time, do.call(cbind, df_list))
final_df
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
subdf_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]),
leadcol)
})
do.call(rbind, subdf_list)
})
final_df <- cbind(Time, do.call(cbind, df_list))
final_df
# WIDE VERSION
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
vec_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]),
leadcol)
})
do.call(rbind, vec_list)
})
final_mat <- cbind(Time, do.call(cbind, df_list))
final_mat
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
vec_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]),
leadcol)
})
#do.call(rbind, vec_list)
})
df_list
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
vec_list <- sapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]),
leadcol)
})
#do.call(rbind, vec_list)
})
df_list
final_mat <- cbind(Time, do.call(cbind, df_list))
final_mat
final_mat <- cbind(Time, unname(do.call(cbind, df_list)))
final_mat
df_list <- by(df1, df1$Lead, function(sub){
sub$Lead <- paste0("Lead.", sub$Lead)
vec_list <- sapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]),
leadcol)
})
#do.call(rbind, vec_list)
})
df_list <- by(df1, df1$Lead, function(sub){
sub$Lead <- paste0("Lead.", sub$Lead)
vec_list <- sapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
sum(sub[mask,"Result"])/sum(sub[mask, "Count"])
})
#do.call(rbind, vec_list)
})
final_mat <- cbind(Time, do.call(cbind, df_list))
final_mat
df_list
# WIDE VERSION
df_list <- by(df1, df1$Lead, function(sub){
leadcol <- paste0("Lead.", sub$Lead[[1]])
vec_list <- setNames(sapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
sum(sub[mask,"Result"])/sum(sub[mask, "Count"])
}),  leadcol)
#do.call(rbind, vec_list)
})
df_list
final_mat <- cbind(Time, do.call(cbind, df_list))
final_mat
df_list <- by(df1, df1$Lead, function(sub){
sub$Lead <- paste0("Lead.", sub$Lead)
vec_list <- setNames(sapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
sum(sub[mask,"Result"])/sum(sub[mask, "Count"])
}),  sub$Lead)
#do.call(rbind, vec_list)
})
df_list
final_mat <- cbind(Time, do.call(cbind, df_list))
final_mat
Time <- 0:10
df_list <- by(df1, df1$Lead, function(sub){
# CURRENT LEAD NAME
leadcol <- paste0("Lead.", sub$Lead[[1]])
# BUILD NAMED NUMERIC VECTOR ACROSS TIME
vec_list <- lapply(Time, function(t) {
mask <- sub$Time.Start>=t & sub$Time.End<=t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]),
leadcol)
})
do.call(rbind, vec_list)
})
final_mat <- cbind(Time, do.call(cbind, df_list))
final_mat
lapply(df_list, typeof)
lapply(df_list, class)
txt <- 'Time.Start  Time.End   Lead   Result   Count
1         0      1        1       1
2         1      1       .5       1
1         0      1        1       1
3         1      1        0       1
6         2      2        1       1
4         3      2        0       1
5         2      1        1       1
3         1      1        0       1
3         2      2        1       1
2         0      2        1       1
7         2      1        0       1
2         1      1       .5       1
9         0      2        1       1
0         0      2        1       1
8         3      1       .5       1'
df1 <- read.table(text=txt, header=TRUE)
df1
Time <- 0:10
mat_list <- by(df1, df1$Lead, function(sub){
# CURRENT LEAD NAME
leadcol <- paste0("Lead.", sub$Lead[[1]])
# BUILD NAMED NUMERIC VECTOR ACROSS TIME
vec_list <- lapply(Time, function(t) {
mask <- sub$Time.Start >= t & sub$Time.End <= t
setNames(sum(sub[mask,"Result"])/sum(sub[mask, "Count"]), leadcol)
})
do.call(rbind, vec_list)
})
# BUILD MASTER MATRIX
final_mat <- cbind(Time, do.call(cbind, mat_list))
final_mat
library(ggplot2)
library(data.table)
Time <- as.POSIXct(origin="1970-01-01",seq(1522461060,1522467000,by=60),tzone="UTC")
P <- abs(rnorm(100,0.0028,sd=0.038))
Qmin <- abs(rnorm(100,0.007,0.0021))
RE.24hr <- sort(rep(1:20,5))
dt1 <- data.table(Time,P,Qmin,RE.24hr)
REL <- max(dt1$RE.24hr)
hydl <- list()
maxp <- max(dt1$P); maxq <- max(dt1$Qmin,na.rm=T)
i <- 1
for(i in REL){
mydata <- subset(dt1,RE.24hr==i)
hydl[[i]] <- ggplot(mydata,aes(x=Time)) + geom_line(aes(y=Qmin),colour='blue') +
geom_line(aes(y=P*10)) + scale_y_continuous(limits=c(0,maxp*10),sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank())
plot(hydl[[i]])
}
do.call(grid.arrange, c(hydl, ncol = 5))
library(gridExtra)
do.call(grid.arrange, c(hydl, ncol = 5))
grid.arrange( grobs=hydl, ncol=5)
grid.arrange(grobs=hydl)
do.call(grid.arrange, list(hydl, ncol = 5))
for(i in REL){
mydata <- subset(dt1,RE.24hr==i)
hydl[[i]] <- ggplot(mydata,aes(x=Time)) + geom_line(aes(y=Qmin),colour='blue') +
geom_line(aes(y=P*10)) + scale_y_continuous(limits=c(0,maxp*10),sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank())
}
for(i in 1:REL){
mydata <- subset(dt1,RE.24hr==i)
hydl[[i]] <- ggplot(mydata,aes(x=Time)) + geom_line(aes(y=Qmin),colour='blue') +
geom_line(aes(y=P*10)) + scale_y_continuous(limits=c(0,maxp*10),sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank())
}
do.call(grid.arrange, c(hydl, ncol = 5))
grid.arrange(grobs=hydl[1:5], ncol=5)
grid.arrange(grobs=hydl, ncol=5)
hydl2 <- lapply(1:REL, function(i) {
mydata <- subset(dt1, RE.24hr==i)
ggplot(mydata, aes(x=Time)) +
geom_line(aes(y=Qmin),colour='blue') + geom_line(aes(y=P*10)) +
scale_y_continuous(limits=c(0,maxp*10), sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank())
})
grid.arrange(grobs=hydl2, ncol=5)
unique(RE.24hr )
hydl3 <- by(dt1, dt1$RE.24hr, function(mydata) {
ggplot(mydata, aes(x=Time)) +
geom_line(aes(y=Qmin),colour='blue') + geom_line(aes(y=P*10)) +
scale_y_continuous(limits=c(0,maxp*10), sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank())
})
grid.arrange(grobs=hydl3, ncol=5)
1:REL
hydl2 <- lapply(REL, function(i) {
mydata <- subset(dt1, RE.24hr==i)
ggplot(mydata, aes(x=Time)) +
geom_line(aes(y=Qmin),colour='blue') + geom_line(aes(y=P*10)) +
scale_y_continuous(limits=c(0,maxp*10), sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank())
})
ggplot(dt1, aes(x=Time)) + geom_line(aes(y=Qmin),colour='blue') +
geom_line(aes(y=P*10)) + scale_y_continuous(limits=c(0,maxp*10),sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank()) + facet_wrap(~RE.24hr)
?facet_grid
?facet_wrap
ggplot(dt1, aes(x=Time)) + geom_line(aes(y=Qmin),colour='blue') +
geom_line(aes(y=P*10)) + scale_y_continuous(limits=c(0,maxp*10),sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank()) + facet_wrap(~RE.24hr, ncol=5)
ggplot(dt1, aes(x=Time)) + geom_line(aes(y=Qmin),colour='blue') +
geom_line(aes(y=P*10)) + scale_y_continuous(limits=c(0,maxp*10),sec.axis = sec_axis(~./10,name="Precip [m]")) +
theme_bw() + theme(axis.title=element_blank()) +
facet_wrap(~RE.24hr, ncol=5, scales="free")
gsub("[a-z]", "[A-Z]", "LKJLjlei 33")
tolower("LKJLjlei 33")
tolower(gsub("^[a-z]", "", LKJLjlei 33"))
tolower(gsub("^[a-z]", "", "LKJLjlei 33"))
gsub("^[a-z]", "", "LKJLjlei 33")
gsub("[a-z]", "", "LKJLjlei 33")
tolower(gsub("[a-z]", "", "LKJLjlei 33"))
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')
# apply your ifelse statement to all characters
mirror_chars <- sapply(chars, function(i)
ifelse(toupper(i) == i, tolower(i), toupper(i)))
# join back to a string
mirror_s = paste(irror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')
# apply your ifelse statement to all characters
mirror_chars <- sapply(chars, function(i)
ifelse(toupper(i) == i, tolower(i), toupper(i)))
# join back to a string
mirror_s = paste(mirror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')
# apply your ifelse statement to all characters
ifelse(toupper(chars) == i, tolower(chars), toupper(chars)))
# join back to a string
mirror_s = paste(mirror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')
# apply your ifelse statement to all characters
mirror_chars <- ifelse(toupper(chars) == i, tolower(chars), toupper(chars))
# join back to a string
mirror_s = paste(mirror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')
# apply your ifelse statement to all characters
mirror_chars <- ifelse(toupper(chars) == chars, tolower(chars), toupper(chars))
# join back to a string
mirror_s = paste(mirror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
strsplit("LKJLjlei 33", '')
strsplit("LKJLjlei 33", '')[1]
strsplit("LKJLjlei 33", '')[[1]]
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')[[1]]
# apply your ifelse statement to all characters
mirror_chars <- ifelse(toupper(chars) == chars, tolower(chars), toupper(chars))
# join back to a string
mirror_s = paste(mirror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
mirror_case <- function(s) {
# break to characters
chars <- strsplit(s, '')[[1]]
# apply your ifelse statement to all characters
mirror_chars <- ifelse(toupper(chars) == chars, tolower(chars), toupper(chars))
# join back to a string
mirror_s = paste(mirror_chars, collapse = "")
return(mirror_s)
}
mirror_case("LKJLjlei 33")
mirror_case("AbCdEfGhIj")
Sys.getenv('LD_LIBRARY_PATH')
?Sys.setenv
options(connectionObserver = NULL)
library(DBI, quietly = TRUE)
library(odbc, quietly = TRUE)
library(ggplot2)
library(grid)
library(gridExtra)
setwd('/home/parfaitg/Documents/MEEKNESS_DEV/GRAPHS')
# RETRIEVE DATA FROM ORACLE
conn <- dbConnect(odbc::odbc(), Driver = "Oracle 11g ODBC Driver", ServerName = "10.0.0.220/XE",
uid = "meekdba", pwd = "poet17")
character_df <- dbGetQuery(conn, 'SELECT ID AS "Id", CHARACTER AS "Character" FROM Characters')
quality_df <- dbGetQuery(conn, 'SELECT CHARACTERID AS "CharacterID", TRIM(Quality) AS "Quality" FROM Qualities')
works_df <- dbGetQuery(conn, 'SELECT CHARACTERID AS "CharacterID", WORKSTYPE AS "WorksType" FROM Works')
dbDisconnect(conn)
seabornPalette <- c("#4c72b0","#55a868","#c44e52","#8172b2","#ccb974","#64b5cd","#4c72b0","#55a868","#c44e52","#8172b2",
"#ccb974","#64b5cd","#4c72b0","#55a868","#c44e52","#8172b2","#ccb974","#64b5cd","#4c72b0","#55a868",
"#c44e52","#8172b2","#ccb974","#64b5cd","#4c72b0","#55a868","#c44e52","#8172b2","#ccb974","#64b5cd",
"#4c72b0","#55a868","#c44e52","#8172b2","#ccb974","#64b5cd","#4c72b0","#55a868","#c44e52","#8172b2",
"#ccb974","#64b5cd","#4c72b0","#55a868","#c44e52","#8172b2","#ccb974","#64b5cd","#4c72b0","#55a868",
"#c44e52","#8172b2","#ccb974","#64b5cd","#4c72b0","#55a868","#c44e52","#8172b2","#ccb974","#64b5cd")
# PAIRWISE CHARACTER TABLE
charqual_df <- transform(merge(character_df, quality_df, by.x="Id", by.y="CharacterID")[c("Character", "Quality")],
key = 1)
agg_df <- aggregate(key ~ Quality, charqual_df, length)
df_list <- by(charqual_df, charqual_df$Character, function(sub) {
charname <- as.character(sub$Character[[1]])
tmp <- merge(agg_df[c("Quality")], sub, by="Quality", all.x=TRUE)
tmp$Character <- ifelse(is.na(tmp$Character), NA, as.character(tmp$Quality))
setNames(tmp, c("Character", charname))[[charname]]
})
x <- Filter(function(x) length(x) == 324, df_list)
g <- tableGrob(table(x$`Mr. Freeze`, x$`Captain Ahab`))
grid.arrange(g, left=textGrob("Mr. Freeze"), bottom=textGrob("Captain Ahab"),
top=textGrob("Pairwise Character Matrix Table", gp=gpar(fontsize=20,font=3)))
# ALL CHARACTER MATRIX
cross_join <- subset(merge(charqual_df, charqual_df, by="key"),
as.character(Character.x) < as.character(Character.y) & Quality.x == Quality.y)
cross_join[] <- sapply(cross_join, as.character)
agg_df <- aggregate(key ~ Character.x + Character.y, cross_join, length)
reshape_df <- reshape(agg_df, idvar="Character.x", v.names="key", timevar="Character.y",
drop=c("Quality.x", "Quality.y"), direction="wide")
row.names(reshape_df) <- NULL
colnames(reshape_df) <- gsub("key.", "", colnames(reshape_df))
HEAT MAPS (CONVERT TO SQL QUERY)
raw <- table(Char1=cross_join$Character.x, Char2=cross_join$Character.y)
for (i in c("Bleeding Gums Murphy", "Barney Gumble", "Bartleby", "Alyosha", "Hamlet")) {
print(i)
sub <- subset(data.frame(raw), Char1 ==i)
sub <- with(sub, sub[order(-Freq),])
print(ggplot(data = sub[1:50,], aes(x=Char1, y=Char2, fill=Freq)) +
geom_tile())
}
# OVERALL TOP 10 QUALITY COUNTS
agg_df <- setNames(aggregate(Id ~ Quality, quality_df, FUN=length), c("Quality", "Count"))
agg_df <- with(agg_df, agg_df[order(-Count),])
agg_df <- within(agg_df, Quality <- factor(Quality, levels=Quality[order(-Count)]))
agg_df <- setNames(aggregate(CharacterId ~ Quality, quality_df, FUN=length), c("Quality", "Count"))
agg_df <- setNames(aggregate(CharacterID ~ Quality, quality_df, FUN=length), c("Quality", "Count"))
agg_df <- with(agg_df, agg_df[order(-Count),])
agg_df <- within(agg_df, Quality <- factor(Quality, levels=Quality[order(-Count)]))
View(agg_df)
ggplot(head(agg_df, 10), aes(Quality, Count, fill=Quality)) +
geom_col() + guides(fill=FALSE) +
labs(title="All Characters Top 10 Qualities", y="Counts") +
scale_fill_manual(values = seabornPalette) +
scale_y_continuous(limits = c(0,max(head(agg_df, 10)$Count)+10), expand = c(0, 0)) +
theme(plot.title = element_text(hjust=0.5, size=18))
# PIE / DONUT CHART
prop_df <- head(agg_df, 10)
prop_df$fraction <- prop_df$Count / sum(prop_df$Count)
prop_df <- with(prop_df, prop_df[order(fraction),])
prop_df$ymax <- cumsum(prop_df$fraction)
prop_df$ymin <- c(0, head(prop_df$ymax, -1))
prop_df
ggplot(prop_df, aes(fill=Quality, ymax=ymax, ymin=ymin, xmax=4, xmin=3)) +
geom_rect() + guides(fill=FALSE) + coord_polar(theta="y") +
scale_fill_manual(values = seabornPalette) +
geom_text(aes(label=Quality, x=3.85, y=(ymin+ymax)/2),
inherit.aes = TRUE, show.legend = FALSE) +
geom_text(aes(label=paste(round(fraction*100, 0),"%"), x=3.5, y=(ymin+ymax)/2),
show.legend = FALSE) +
labs(title="Top 10 Qualities Breakdown", y="", x="") +
theme(panel.grid=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
plot.title = element_text(hjust = 0.5, size=18))
quality_df <- merge(quality_df, works_df, by="CharacterID")
qualplots <- by(quality_df, quality_df$WorksType, function(sub) {
agg_df <- setNames(aggregate(Id ~ Quality, sub, FUN=length), c("Quality", "Count"))
agg_df <- with(agg_df, agg_df[order(-Count),])
agg_df <- within(agg_df, Quality <- factor(Quality, levels=Quality[order(-Count)]))
ggplot(agg_df[1:10,], aes(Quality, Count, fill=Quality)) +
geom_col() + guides(fill=FALSE) +
labs(title=paste("All Characters Top 10 Qualities\nfor", sub$WorksType[[1]], "Type"), y="Counts") +
scale_fill_manual(values = seabornPalette) +
scale_y_continuous(limits = c(0,max(agg_df$Count)+1), expand = c(0, 0)) +
theme(plot.title = element_text(hjust = 0.5, size=12),
axis.text.x = element_text(angle = 23, hjust = 1))
})
qualplots <- by(quality_df, quality_df$WorksType, function(sub) {
agg_df <- setNames(aggregate(CharacterID ~ Quality, sub, FUN=length), c("Quality", "Count"))
agg_df <- with(agg_df, agg_df[order(-Count),])
agg_df <- within(agg_df, Quality <- factor(Quality, levels=Quality[order(-Count)]))
ggplot(agg_df[1:10,], aes(Quality, Count, fill=Quality)) +
geom_col() + guides(fill=FALSE) +
labs(title=paste("All Characters Top 10 Qualities\nfor", sub$WorksType[[1]], "Type"), y="Counts") +
scale_fill_manual(values = seabornPalette) +
scale_y_continuous(limits = c(0,max(agg_df$Count)+1), expand = c(0, 0)) +
theme(plot.title = element_text(hjust = 0.5, size=12),
axis.text.x = element_text(angle = 23, hjust = 1))
})
do.call(grid.arrange, qualplots)
# OVERALL TOP 10 QUALITY COUNTS
agg_df <- aggregate(ID~WorksType+Quality, quality_df, FUN=length)
agg_df <- setNames(agg_df, c("WorksType", "Quality", "Count"))
agg_df <- with(agg_df, agg_df[order(-Count),])
ggplot(agg_df[1:50,], aes(Quality, Count, fill=Quality)) +
geom_col() + guides(fill=FALSE) +
labs(title="All Characters Top 50 Qualities By Works Type", y="Counts") +
scale_fill_manual(values = seabornPalette) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(hjust = 0.5, size=18),
axis.text.x = element_text(angle = 23, hjust = 1)) +
facet_wrap(~WorksType, scales="free_x")
# OVERALL TOP 10 QUALITY COUNTS
agg_df <- aggregate(CharacterID~  WorksType + Quality, quality_df, FUN=length)
agg_df <- setNames(agg_df, c("WorksType", "Quality", "Count"))
agg_df <- with(agg_df, agg_df[order(-Count),])
ggplot(agg_df[1:50,], aes(Quality, Count, fill=Quality)) +
geom_col() + guides(fill=FALSE) +
labs(title="All Characters Top 50 Qualities By Works Type", y="Counts") +
scale_fill_manual(values = seabornPalette) +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(hjust = 0.5, size=18),
axis.text.x = element_text(angle = 23, hjust = 1)) +
facet_wrap(~WorksType, scales="free_x")
